package net.sf.textbeans.beaver;

import java.util.ArrayList;
import beaver.*;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "OneLineExample.beaver".
 */
public class TextbeansParser extends Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short id = 1;
		static public final short fee = 2;
		static public final short at = 3;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9oDZkqAmZ0CHM#w3pidWY08WY8#gK#jJkVYQRRVOYudDuMqlPAkwbKf#Tq77vJL#aUDEX#" +
		"ZJw5Nw1bwXEPwgvQqqXflr399fiHxi$$NQtVSc3OtHMKuGG$RiW5dsC4UBd20OzadnxZSY$" +
		"Clbkf8Qv38B32I6xzKK3m5#GiImpRX");

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	private final Action[] actions;

	public TextbeansParser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			new Action() {	// [0] lst$order = order
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			new Action() {	// [1] lst$order = lst$order order
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
				}
			},
			Action.NONE,  	// [2] opt$lst$order = 
			Action.RETURN,	// [3] opt$lst$order = lst$order
			Action.RETURN,	// [4] batch = opt$lst$order
			RETURN3,	// [5] order = id at fee; returns 'fee' although none is marked
			Action.RETURN,	// [6] order = id
			RETURN2,	// [7] order = id fee; returns 'fee' although none is marked
			RETURN2	// [8] order = fee id; returns 'id' although none is marked
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
